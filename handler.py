import player
import duel
import random
from aiogram import Router, Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from keyboards import fight_kb, base_kb

router = Router()
dp = Dispatcher()

class stances(StatesGroup):
    berserk = State()
    agression = State()
    ready = State()
    restraint = State()
    serenity = State()

class condition(StatesGroup):
    in_fight = State()
    not_in_fight = State()

@router.message(Command("challenge"), StateFilter(condition.not_in_fight))
async def challenge_fight(message: Message, command: CommandObject, state: FSMContext, bot: Bot, dp: Dispatcher):
    if command.args:
        enemy_id = int(command.args)

        text = f"–í—ã–∑–æ–≤ –∏–≥—Ä–æ–∫—É {enemy_id} –±—Ä–æ—à–µ–Ω."
        await message.answer(text=text)

        text = f"–í–∞–º –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤ –∏–≥—Ä–æ–∫ {message.from_user.first_name}. –ù–∞—á–∏–Ω–∞–µ–º –±–æ–π..."
        await bot.send_message(chat_id=enemy_id, text=text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–∞–≥—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–≤–æ–π ID
        fsm: FSMContext = dp.fsm.resolve_context(bot=bot, user_id=enemy_id, chat_id=enemy_id)
        await fsm.set_state(condition.in_fight)
        await fsm.update_data(enemy_id=message.from_user.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–≤–æ—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ID –≤—Ä–∞–≥–∞
        await state.set_state(condition.in_fight)
        await state.update_data(enemy_id=enemy_id)

        current_duel = await duel.create(message.from_user.id, enemy_id)
        if current_duel:
            await message.answer("–õ–æ–±–±–∏ —Ñ–∞–π—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            await bot.send_message(current_duel.defender, f"–õ–æ–±–±–∏ —Ñ–∞–π—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

@router.message(Command("challengebot"), StateFilter(condition.not_in_fight))
async def challenge_fight(message: Message, command: CommandObject, state: FSMContext, bot: Bot, dp: Dispatcher):
    enemy_id = int(command.args)
    enemy = player.FindPlayerById(enemy_id)
    you = player.FindPlayerById(message.from_user.id)
    text = f"–í—ã–∑–æ–≤ –∏–≥—Ä–æ–∫—É {enemy.nickname} –±—Ä–æ—à–µ–Ω."

    stance = "testStance"

    await message.answer(text=text)
    await state.set_state(condition.in_fight)
    current_duel = await duel.create(message.from_user.id, enemy_id)
    if current_duel:
        await message.answer("–õ–æ–±–±–∏ —Ñ–∞–π—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        text = (
            f'{you.nickname} üî∏{you.level} | ‚ù§Ô∏è ({you.health_points}/100)\n'
            f'‚ïöüÜö‚ïó\n'
            f'{enemy.nickname} üî∏{enemy.level} | ‚ù§Ô∏è ({enemy.health_points}/100)\n'
            f'\n'
            f'\n'
            f'{stance}'
        )
        markup = fight_kb
        await message.answer(text=text, reply_markup=markup)

@router.message(F.text == '–°–±–µ–∂–∞—Ç—å', StateFilter(condition.in_fight))
async def run(message: Message, state: FSMContext):

    #–°—é–¥–∞ —Ñ–æ—Ä–º—É–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –ø–æ–±–µ–≥ –æ—Ç 0 –¥–æ 100.
    running_chance = 70

    if (running_chance>random.randint(0,100)):
        markup = base_kb
        await state.set_state(condition.not_in_fight)

        duel.close(player.FindPlayerById(message.from_user.id).infight)
        await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏", reply_markup=markup)
    else:
        #await bot.send_message(chat_id=enemy_id, text=text)
        await message.answer("–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–±–µ–∂–∞—Ç—å.")


@router.message(Command("accept"), StateFilter(condition.not_in_fight))
async def accept_fight(message: Message, bot: Bot, dp: Dispatcher, state: FSMContext, player: player, i18n):
    pass


#—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –∏–≥—Ä–æ–∫—É condition.not_in_fight. –°–ª–µ–¥—É–µ—Ç –ø–æ—Ç–æ–º –≤—ã–¥–∞–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω–¥–∏—à–Ω –∏–≥—Ä–æ–∫—É –∫–∞–∫-–Ω–∏–±—É–¥—å –µ—â—ë.
@router.message(Command("unfight"))
async def unfight(message: Message, state: FSMContext):
    await state.set_state(condition.not_in_fight)